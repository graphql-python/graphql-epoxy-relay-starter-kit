input AddWidgetInput {
  name: String
  clientMutationId: String
}

type AddWidgetPayload {
  newWidget: WidgetEdge
  viewer: User
  clientMutationId: String
}

input DeleteWidgetInput {
  id: ID
  clientMutationId: String
}

type DeleteWidgetPayload {
  deletedWidgetId: ID
  viewer: User
  clientMutationId: String
}

input EditWidgetInput {
  id: ID
  name: String
  clientMutationId: String
}

type EditWidgetPayload {
  widget: Widget
  clientMutationId: String
}

type Mutations {
  addWidget(input: AddWidgetInput!): AddWidgetPayload
  deleteWidget(input: DeleteWidgetInput!): DeleteWidgetPayload
  editWidget(input: EditWidgetInput!): EditWidgetPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: User
}

type User implements Node {
  id: ID!
  name: String
  widgets(after: String, before: String, first: Int, last: Int): WidgetConnection
}

type Widget implements Node {
  id: ID!
  name: String
}

type WidgetConnection {
  pageInfo: PageInfo!
  edges: [WidgetEdge]
}

type WidgetEdge {
  node: Widget
  cursor: String!
}
